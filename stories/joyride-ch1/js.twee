:: Script [script]
(() => {
    const createElement = (id, content = "", tagName = "div", otherAttributes = {}) => {
        const el = document.createElement(tagName);
        el.innerHTML = content;
        if (id) {
            el.setAttribute("id", id);
        }
        Object.entries(otherAttributes).forEach(([key, value]) => el.setAttribute(key, value));
        return el;
    }

    const stateElement = createElement("state", JSON.stringify(window.story.state, null, 1))
    const actionElement = createElement("actions", "Actions");
    const storydataElement = document.querySelector("tw-storydata");
    document.body.insertBefore(stateElement, storydataElement);
    document.body.insertBefore(actionElement, storydataElement);

    window.setup = window.setup || {};
    Object.assign(window.setup, {
        createElement,
        randomNavigatorId: (numDigits = 5) => {
            const factor = Math.pow(10, numDigits-1)
            let num = Math.floor(Math.random()*factor);
            if (num < factor) {
                num += factor * (Math.floor(Math.random()*10))
            }
            return num;
        },
        addAction: (actionName, passageTarget) => {
            const button = createElement(null, actionName, "button");
            button.classList.add("action-button");
            actionElement.appendChild(button);
            if (passageTarget) {
                button.addEventListener("click", (e) => {
                    if (typeof passageTarget === "function") {
                        passageTarget(e);
                    } else if (window.story.passage(passageTarget)) {
                        window.story.show(passageTarget);
                    }
                })

                if (
                    typeof passageTarget !== "function" && 
                    !window.story.passage(passageTarget)
                ) {
                    button.classList.add("passage-not-found");
                }
            }
        }
    });

    const initialState = {
        playerNavigatorId: window.setup.randomNavigatorId()
    };
    window.story.state = Object.assign(window.story.state || {}, initialState);

    const updateStateDisplay = () => {
        stateElement.innerHTML = JSON.stringify(window.story.state, null, 1);
        (window.story.state.actions || []).forEach(action => {
            let actionLabel;
            let actionTarget;
            if (typeof action === "string") {
                actionLabel = actionTarget = action;
            } else if (typeof action === "object") {
                if (Array.isArray(action) && action.length === 2) {
                    actionLabel = action[0];
                    actionTarget = action[1];
                } else {
                    actionLabel = action.label;
                    actionTarget = action.target || action.label;
                }
            } else {
                console.warn(`Tried to set an action of type "${typeof action}." Only "string" or "object" allowed`);
                return;
            }
            window.setup.addAction(actionLabel, actionTarget);
        })
    }
    window.setup.updateStateDisplay = updateStateDisplay;
    updateStateDisplay();

    $(window).on("sm.passage.showing", (event, eventObject) => {
        actionElement.innerHTML = "";
        window.story.state.actions = [];
    })
    $(window).on("sm.passage.shown", (event, eventObject) => {
        updateStateDisplay();
    })
})()