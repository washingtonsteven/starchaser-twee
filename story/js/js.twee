:: js [script]
// Config.debug = true;

window.setup.unreadMessagesCount = function() {
    if (Array.isArray(State.variables.messages)) {
        const found = State.variables.messages.filter(function(message) { return !message.read; });
        return found.length;
    }

    return 0;
}

window.setup.addMessage = function(newMessage) {
    if (Array.isArray(State.variables.messages)) {
        const existing = State.variables.messages.find(function(message) {
            return newMessage.subject === message.subject &&
                newMessage.from === message.from &&
                newMessage.body === message.body;
        });

        if (!existing) {
            State.variables.messages.push(newMessage);
            UIBar.update();
        }
    }
}


// Tooltip Macro
Macro.add("tooltip", {
    tags: null,
    handler: function() {
        const tooltipText = this.args[0]
        const direction = this.args[1] ||  "auto";
        const payload = (this.payload || []).find(p => p.name === "tooltip");
        const text = (payload || {}).contents || "trigger";

        window.setup.createPopper(tooltipText, direction, text, this.output);
    }
});
